//AuthProto.proto

/*
写协议规则：
0.协议ID两个字节，最大65536，不要超过不然会有问题
1.先定义枚举，再定义协议内容, 枚举一定要从0开始
1.协议名字（类型）用驼峰命名
2.协议字段统一小写（因为protobufjs 大小写不区分），不用下划线
4.枚举要大写加下划线, 枚举不可重名，否则会出现问题

命名规则：
REQ_XX:  客户端请求
RES_XX:  服务端根据客户端请求推送，一一对应
PULL_XX: 客户端拉取，服务可能推送多条消息
PUSH_XX: 服务主动推送
*/

/*
基本类型： 
常用： bool, int32(负数效率低下), sint32(负数速度更快)，int64(负数效率低下), sint64(负数速度更快), string, bytes, enum, message（message内部可以嵌套）
uint32, uint64,
不常用： double, float, fixed32(四个字节，如果>2^28比uint32效率更高), fixed64(八个字节，如果>2^56比uint64效率更高),
数组类型：repeated
可选类型：optional
必须类型: required,如果不写的话就是optional类型
*/


syntax = "proto3"; 
package auth.client.proto;

enum XY_ID {
  INVALED = 0;

  REQ_UNAMEREGIST             = 10001;    // 用户名密码注册
  RES_UNAMEREGIST             = 10002;

  REQ_UNAMELOGIN              = 10003;    // 用户名密码登陆
  RES_UNAMELOGIN              = 10004;

  REQ_GUESTLOGIN              = 10005;    // 游客登陆        
  RES_GUESTLOGIN              = 10006;

  REQ_WECHATLOGIN             = 10007;    // 微信登录
  RES_WECHATLOGIN             = 10008;

  REQ_WECHATSESSIONLOGIN      = 10009;    // 微信session登录
  RES_WECHATSESSIONLOGIN      = 10010;

  REQ_LOGINOUT                = 10011;    // 退出登录
  RES_LOGINOUT                = 10012;

  PUSH_RELOGIN                = 10013;    // 被重复登录

  REQ_USERCENTERINFO          = 10014;    // 获取玩家信息
  RES_USERCENTERINFO          = 10015;
}

message ReqUnameRegist {
	required string uname = 1;
	required string upwdmd5 = 2;
}

message ResUnameRegist {
  enum STATUS {
    SUCCESS = 0;
    FAILED_ALREADY_EXIST = 1;
    FAILED_UNAME_PWD_INVALID = 2;
  }
  required sint32 status = 1;
}

message ReqUnameLogin {  
	required string uname = 1;
	required string upwd = 2; 
}

message ResUnameLogin {
  enum STATUS {
    SUCCESS = 0;
    FAILED_UNAME_PWD_INVALID = 1;
  }
  required sint32 status = 1;
  optional sint32 uid = 2;
  optional string logininfo = 3; //登录信息，以便客户端保存
}

message ReqGuestLogin {
  required string guestkey = 1;
}

message ResGuestLogin {
  enum STATUS {
    SUCCESS = 0;
    FAILED_PWD_INVALID = 1;
  }
  required sint32 status = 1;
  optional sint32 uid = 2;
  optional string logininfo = 3;
}

message ReqWeChatLogin {
  required string logincode = 1;
  required string userlogininfo = 2;
}

message ResWeChatLogin {
  enum STATUS {
    SUCCESS = 0;
    FAILED = 1;
  }
  required sint32 status = 1;
  optional sint32 uid = 2;
  optional string userlogininfo = 3;
}

message ReqWeChatSessionLogin {
  required string wechatsessionkey = 1;
}

message ResWeChatSessionLogin {
  enum STATUS {
    SUCCESS = 0;
    FAILED = 1;
  }
  required sint32 status = 1;
  optional sint32 uid = 2;
  optional string userlogininfo = 3;
}

message ReqLoginOut {
}

message ResLoginOut {
  enum STATUS {
    SUCCESS = 0;
    FAILED = 1;
  }
  required sint32 status = 1;
}

message PushRelogin {
}

message ReqUserCenterInfo {
}

message ResUserCenterInfo {
  enum STATUS {
    SUCCESS = 0;
    FAILED = 1;
  }
  required sint32 status = 1;
	optional string usercenterinfo = 2;
}
