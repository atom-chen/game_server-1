//GameHoodleProto.proro
//弹珠游戏

syntax = "proto3";
package GameHoodleProto;

enum Cmd {
	INVALED 					= 0;

	///////////////////////////////////
	//游戏通用协议
	///////////////////////////////////

	eLoginLogicReq 				= 101;				// 登录游戏服
	eLoginLogicRes 				= 102;
	eCheckLinkGameReq 			= 103; 				// 进入包厢，连接到游戏服务，发送一些数据到客户端
	eCheckLinkGameRes 			= 104;
	eUserInfoRes 				= 105;				// 玩家信息
	eGameRuleRes 				= 106; 				// 房间规则
	eRoomIdRes 					= 107; 				// 房间号
	ePlayCountRes 				= 108; 				// 局数
	eUserOfflineRes 			= 109; 				// 玩家断线
	eUserEmojReq				= 110; 				// 玩家使用表情
	eUserEmojRes				= 111;
	
	///////////////////////////////////
	//游戏具体玩法相关
	///////////////////////////////////
	eUserReadyReq 				= 112;				// 玩家准备
	eUserReadyRes 				= 113;
	eGameStartRes 				= 114;				// 游戏开始
	eGameResultRes 				= 115;				// 小结算
	eTotalGameResultRes 		= 116; 				// 大结算

	ePlayerFirstBallPosRes 		= 117; 				// 小球开局位置
	ePlayerPowerRes 			= 118;  			// 玩家权限，0 不能射击，1 能射击
	ePlayerShootReq 			= 119;  			// 玩家射击
	ePlayerShootRes 			= 120;  			
	ePlayerBallPosReq 			= 121; 				// 玩家位置
	ePlayerBallPosRes 			= 122;  		
	ePlayerIsShootedReq 		= 123;  			// 玩家被击中
	ePlayerIsShootedRes 		= 124; 
	ePlayerScoreRes 			= 125;				// 玩家分数
}

///////////////////////////////////
//游戏通用协议
///////////////////////////////////

message UserInfo {
	required string numberid = 1;
	required string userinfostring = 2;
}

message CheckLinkGameReq {

}

message CheckLinkGameRes {
	required sint32 status = 1;
}

message UserInfoRes {
	repeated UserInfo userinfo = 1;
}

message GameRuleRes {
	required string gamerule = 1;
}

message RoomIdRes {
	required string roomid = 1;
}

message PlayCountRes {
	required string playcount = 1;
	required string totalplaycount = 2;
}

message UserReadyReq {
	
}

message UserReadyRes {
	required sint32 status 	= 1;
	optional sint32 seatid = 2;
	optional sint32 userstate = 3;
}

message GameStartRes {
	required sint32 status = 1;
}

message UserOfflineRes {
	required sint32 seatid = 1;
}

message LoginLogicReq {
	optional bool isrobot = 1;
}

message LoginLogicRes {
	required sint32 status = 1;
}

///////////////////////////////////
//游戏具体玩法相关
///////////////////////////////////

//单个玩家位置
message OnePlayerPos {
	required sint32 seatid = 1;
	required string posx = 2;
	required string posy = 3;
}

//单个玩家权限
message OnePlayerPower {
	required sint32 seatid = 1;
	required sint32 power = 2;
}

//单个玩家得分
message OnePlayerScore {
	required sint32 seatid = 1;
	required string score = 2;
}

//玩家金币
message OnePlayerGolds {
	required sint32 seatid = 1;
	required string gold = 2;
}

message PlayerFirstBallPosRes {
	repeated OnePlayerPos positions = 1;
}

message PlayerPowerRes {
	repeated OnePlayerPower powers = 1;			//玩家权限
}

message PlayerShootReq {
	required sint32 seatid = 1;
	required string posx = 2;
	required string posy = 3;
	optional int32 shootpower = 4;
}

message PlayerShootRes {
	required sint32 status = 1;
	required sint32 seatid = 2;
	required string posx = 3;
	required string posy = 4;
	optional int32 shootpower = 5;		//玩家权限
}

message PlayerBallPosReq {
	repeated OnePlayerPos positions = 1; 		//玩家位置
}

message PlayerBallPosRes {
	required sint32 status = 1;
	repeated OnePlayerPos positions = 2;		//玩家位置
}

message PlayerIsShootedReq {
	required sint32 srcseatid = 1;		//射击玩家
	required sint32 desseatid = 2;		//被射击玩家
}

message PlayerIsShootedRes {
	required sint32 status = 1;
	required sint32 srcseatid = 2;		//射击玩家
	required sint32 desseatid = 3;		//被射击玩家
}

message GameResultRes {
	repeated OnePlayerScore scores = 1; 	//玩家分数
	optional bool isfinal = 2; //是否大结算
}

message TotalGameResultRes {
	repeated OnePlayerScore scores = 1; 	//玩家分数
	repeated OnePlayerGolds golds = 2;		//玩家金币
}

message PlayerScoreRes {
	repeated OnePlayerScore scores = 1;		//玩家分数
}


message UserEmojReq {
	required string emojconfig = 1;
}

message UserEmojRes {
	required sint32 status = 1;
	optional string emojconfig = 2;
}