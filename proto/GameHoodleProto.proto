//GameHoodleProto.proro
//弹珠游戏

//写协议原则：
/*
1.协议名字用驼峰命名
2.协议字段统一小写（因为protobufjs 大小写不区分）
3.先定义枚举，再定义协议内容
*/

syntax = "proto3";
package GameHoodleProto;

enum Cmd {
	INVALED 					= 0;
	
	///////////////////////////////////
	//房间相关协议
	///////////////////////////////////

	eCreateRoomReq 				= 1; 				// 创建包厢
	eCreateRoomRes 				= 2;
	eJoinRoomReq 				= 3;				// 加入包厢
	eJoinRoomRes 				= 4;
	eExitRoomReq 				= 5;				// 退出包厢
	eExitRoomRes 				= 6;
	eDessolveReq 				= 7;				// 解散包厢
	eDessolveRes 				= 8;
	eGetRoomStatusReq 			= 9;				// 包厢状态
	eGetRoomStatusRes 			= 10;
	eBackRoomReq 				= 11;				// 返回包厢
	eBackRoomRes 				= 12;

	///////////////////////////////////
	//游戏通用协议
	///////////////////////////////////

	eCheckLinkGameReq 			= 13; 				// 进入包厢，连接到游戏服务，发送一些数据到客户端
	eCheckLinkGameRes 			= 14;
	eUserInfoRes 				= 15;				// 玩家信息
	eGameRuleRes 				= 16; 				// 房间规则
	eRoomIdRes 					= 17; 				// 房间号
	ePlayCountRes 				= 18; 				// 局数
	eUserReadyReq 				= 19;				// 玩家准备
	eUserReadyRes 				= 20;
	eGameStartRes 				= 21;				// 游戏开始
	eGameEndRes 				= 22;				// 游戏结束
	eLoginLogicReq 				= 23;				// 登录游戏服
	eLoginLogicRes 				= 24;
	eUserOfflineRes 			= 25; 				// 玩家断线

	///////////////////////////////////
	//游戏具体玩法相关
	///////////////////////////////////
	ePlayerFirstBallPosRes 		= 26; 				// 小球开局位置
	ePlayerPowerRes 			= 27;  				// 玩家权限，0 不能射击，1 能射击
	ePlayerShootReq 			= 28;  				// 玩家射击
	ePlayerShootRes 			= 29;  			
	ePlayerBallPosReq 			= 30; 				// 玩家位置
	ePlayerBallPosRes 			= 31;  		
	ePlayerIsShootedReq 		= 32;  				// 玩家被击中
	ePlayerIsShootedRes 		= 33; 
	eGameResultRes 				= 34;				// 小结算
	eTotalGameResultRes 		= 35; 				// 大结算
	ePlayerScoreRes 			= 36;				// 玩家分数
	eUserMatchReq 				= 37;				// 玩家匹配
	eUserMatchRes 				= 38;
	eUserStopMatchReq 			= 39; 				// 玩家取消匹配
	eUserStopMatchRes 			= 40;
	eUserGameInfoReq 			= 41; 				// 玩家信息,金币等
	eUserGameInfoRes 			= 42;
	eUserBallInfoReq 			= 43;				// 获取玩家小球信息
	eUserBallInfoRes 			= 44;
	eUpdateUserBallReq 			= 45;				// 合成，卖出小球，发起更新请求
	eUpdateUserBallRes 			= 46;
	eStoreListReq 				= 47; 				// 获取商城列表
	eStoreListRes				= 48;
	eBuyThingsReq 				= 49; 				// 购买
	eBuyThingsRes				= 50;
	eUseHoodleBallReq			= 51;				//使用小球
	eUseHoodleBallRes			= 52;
	eUserConfigReq				= 53;				//玩家配置(游戏配置，玩家弹珠使用等级，等)
	eUserConfigRes				= 54;
	eUserEmojReq				= 55; 				//玩家使用表情
	eUserEmojRes				= 56;
	eUserPlayAgainReq			= 57; 				//玩家请求再次对局（当前对局结束时的玩家）
	eUserPlayAgainRes			= 58;				//玩家收到另一个对局玩家再次对局的回应
	eUserPlayAgainAnswerReq 	= 59;				//玩家回应：另外一个玩家的再次对局请求
	eUserPlayAgainAnswerRes 	= 60; 				//玩家收到：另外一个玩家的再次对局的请求
	eUserPlayAgainStartRes 		= 61;				//玩家再次对局，开始游戏
}

///////////////////////////////////
//房间相关协议
///////////////////////////////////

message CreateRoomReq {
	required string gamerule = 1;
}

message CreateRoomRes {
	required sint32 status = 1;
}

message JoinRoomReq {
	required string roomid = 1;
}

message JoinRoomRes {
	required sint32 status = 1;
}

message ExitRoomReq {
	
}

message ExitRoomRes {
	required sint32 status = 1;
	optional sint32 numberid = 2;
}

message DessolveReq {
	
}

message DessolveRes {
	required sint32 status = 1;
}

message GetRoomStatusReq {
	
}

message GetRoomStatusRes {
	required sint32 status = 1;
}

message BackRoomReq {
	
}

message BackRoomRes {
	required sint32 status = 1;
}

///////////////////////////////////
//游戏通用协议
///////////////////////////////////

message UserInfo {
	required string numberid = 1;
	required string userinfostring = 2;
}

message CheckLinkGameReq {

}

message CheckLinkGameRes {
	required sint32 status = 1;
}

message UserInfoRes {
	repeated UserInfo userinfo = 1;
}

message GameRuleRes {
	required string gamerule = 1;
}

message RoomIdRes {
	required string roomid = 1;
}

message PlayCountRes {
	required string playcount = 1;
	required string totalplaycount = 2;
}

message UserReadyReq {
	
}

message UserReadyRes {
	required sint32 status 	= 1;
	optional sint32 seatid = 2;
	optional sint32 userstate = 3;
}

message GameStartRes {
	required sint32 status = 1;
}

message GameEndRes {
	repeated sint32 status = 1;
}

message UserOfflineRes {
	required sint32 seatid = 1;
}

message LoginLogicReq {
}

message LoginLogicRes {
	required sint32 status = 1;
}

///////////////////////////////////
//游戏具体玩法相关
///////////////////////////////////

//单个玩家位置
message OnePlayerPos {
	required sint32 seatid = 1;
	required string posx = 2;
	required string posy = 3;
}

//单个玩家权限
message OnePlayerPower {
	required sint32 seatid = 1;
	required sint32 power = 2;
}

//单个玩家得分
message OnePlayerScore {
	required sint32 seatid = 1;
	required string score = 2;
}

//玩家金币
message OnPlayerGolds {
	required sint32 seatid = 1;
	required string gold = 2;
}

message PlayerFirstBallPosRes {
	repeated OnePlayerPos positions = 1;
}

message PlayerPowerRes {
	repeated OnePlayerPower powers = 1;
}

message PlayerShootReq {
	required sint32 seatid = 1;
	required string posx = 2;
	required string posy = 3;
	optional int32 shootpower = 4;
}

message PlayerShootRes {
	required sint32 status = 1;
	required sint32 seatid = 2;
	required string posx = 3;
	required string posy = 4;
	optional int32 shootpower = 5;		//玩家权限
}

message PlayerBallPosReq {
	repeated OnePlayerPos positions = 1; 		//玩家位置
}

message PlayerBallPosRes {
	required sint32 status = 1;
	repeated OnePlayerPos positions = 2;		//玩家位置
}

message PlayerIsShootedReq {
	required sint32 srcseatid = 1;		//射击玩家
	required sint32 desseatid = 2;		//被射击玩家
}

message PlayerIsShootedRes {
	required sint32 status = 1;
	required sint32 srcseatid = 2;		//射击玩家
	required sint32 desseatid = 3;		//被射击玩家
}

message GameResultRes {
	repeated OnePlayerScore scores = 1; 	//玩家分数
}

message TotalGameResultRes {
	repeated OnePlayerScore scores = 1; 	//玩家分数
	repeated OnPlayerGolds golds = 2;		//玩家金币
}

message PlayerScoreRes {
	repeated OnePlayerScore scores = 1;		//玩家分数
}

message UserMatchReq {
	required sint32 zoomid = 1;  //房间类型
}

message UserMatchRes {
	required sint32 status = 1;
	optional bool matchsuccess = 2;		//是否匹配成功
	repeated UserInfo userinfo = 3;		//玩家信息
}

message UserStopMatchReq {
}

message UserStopMatchRes {
	required sint32 status = 1;
}

message UserGameInfoReq {

}

message UserGameInfoRes {
	required sint32 status = 1;
	optional string userinfostring = 2;		//玩家游戏服信息
}

message UserBallInfoReq {

}

message UserBallInfoRes {
	required sint32 status = 1;
	optional string userballinfostring = 2; //小球个数,querystring格式："lv_1=0&lv_2=1&lv_3=3&lv_4=4&lv_5=10"
}

message UpdateUserBallReq {
	required sint32 updatetype = 1; 	//更新类型，0:卖了，1:合成, 2:赠送
	required sint32 level = 2;			//等级
	required sint32 count = 3;			//数量
}

message UpdateUserBallRes {
	required sint32 status = 1;
	optional string userballinfostring = 2;  //小球个数,querystring格式："lv_1=0&lv_2=1&lv_3=3&lv_4=4&lv_5=10"
}

//某一种商品的信息
message OneStoreProp {
	required sint32 propsvrindex = 1;
	required sint32 propid = 2;
	required sint32 propcount = 3;
	required sint32 propprice = 4;
	required string propinfo = 5;
}

//获取商城列表
message StoreListReq {

}

//商城列表
message StoreListRes {
	required sint32 status = 1;
	repeated OneStoreProp storeprops = 2;
}

//发起购买请求
message BuyThingsReq {
	required sint32 propsvrindex = 1;
	required sint32 propid = 2;
	required sint32 propcount = 3;
	required sint32 propprice = 4;
	required string propinfo = 5;
}

//购买返回
message BuyThingsRes {
	required sint32 status = 1;
	optional sint32 propsvrindex = 2;
	optional sint32 propid = 3;
	optional sint32 propcount = 4;
	optional sint32 propprice = 5;
	optional string propinfo = 6;
}

//使用小球
message UseHoodleBallReq {
	required sint32 balllevel = 1;
}

message UseHoodleBallRes {
	required sint32 status = 1;
	optional sint32 balllevel = 2;
}

message UserConfigReq {
}

message UserConfigRes {
	required sint32 status = 1;
	optional string userconfigstring = 2;
}

message UserEmojReq {
	required string emojconfig = 1;
}

message UserEmojRes {
	required sint32 status = 1;
	optional string emojconfig = 2;
}

message UserPlayAgainReq {
	repeated sint32 otheruids = 1; //uids 房间内其他玩家的uid,方便房间解散了以后服务查找玩家
}

message UserPlayAgainRes {
	required sint32 status = 1;
	optional sint32 responsecode = 2; 	//发送玩家对局请求，1为成功
}

//玩家回应：另外一个玩家的再次对局请求 (c->s)
message UserPlayAgainAnswerReq {
	required sint32 requseruid = 1;		//请求人的uid，方便通知玩家
	required sint32 responsecode = 2; 	//返回码，是否答应，1成功，其他失败
}

//玩家收到：另外一个玩家的再次对局的请求(s->c)
message UserPlayAgainAnswerRes {
	required sint32 status = 1;
	optional string ansconfig = 2; 	//游戏配置（xx玩家, xx游戏，房间号，几人, json串）
}

message UserPlayAgainStartRes {
	required sint32 status = 1;
}