//GameHoodleProto.proro
//弹珠游戏

syntax = "proto3";
package GameHoodleProto;

enum Cmd {
	INVALED = 0;
	
	///////////////////////////////////
	//房间相关协议
	///////////////////////////////////

	eCreateRoomReq = 1; 		//创建包厢
	eCreateRoomRes = 2;

	eJoinRoomReq = 3;			//加入包厢
	eJoinRoomRes = 4;

	eExitRoomReq = 5;			//退出包厢
	eExitRoomRes = 6;

	eDessolveReq = 7;			//解散包厢
	eDessolveRes = 8;

	eGetRoomStatusReq = 9;		//包厢状态
	eGetRoomStatusRes = 10;

	eBackRoomReq = 11;			//返回包厢
	eBackRoomRes = 12;

	///////////////////////////////////
	//游戏通用协议
	///////////////////////////////////

	eCheckLinkGameReq = 13; 	//进入包厢，连接到游戏服务，发送一些数据到客户端
	eCheckLinkGameRes = 14;

	eUserInfoRes = 15;			//玩家信息

	eGameRuleRes = 16; 			//房间规则
	eRoomIdRes = 17; 			//房间号
	ePlayCountRes = 18; 		//局数

	eUserReadyReq = 19;			//玩家准备
	eUserReadyRes = 20;
	
	eGameStartRes = 21;			//游戏开始
	eGameEndRes = 22;			//游戏结束

	eLoginLogicReq = 23;		//登录游戏服
	eLoginLogicRes = 24;

	eUserOfflineRes = 25; 		//玩家断线

	///////////////////////////////////
	//游戏具体玩法相关
	///////////////////////////////////
	ePlayerFirstBallPosRes = 26; 	// 小球开局位置
	ePlayerPowerRes = 27;  			// 玩家权限，0 不能射击，1 能射击
	ePlayerShootReq = 28;  			// 玩家射击
	ePlayerShootRes = 29;  			// 
	ePlayerBallPosReq = 30; 		// 玩家位置
	ePlayerBallPosRes = 31;  		// 
	ePlayerIsShootedReq = 32;  		// 玩家被击中
	ePlayerIsShootedRes = 33;  		// 
	eGameResultRes = 34;			// 小结算
	eTotalGameResultRes = 35; 		// 大结算
	ePlayerScoreRes = 36;			// 玩家分数

	eUserMatchReq = 37;				// 玩家匹配
	eUserMatchRes = 38;

	eUserStopMatchReq = 39; 		// 玩家取消匹配
	eUserStopMatchRes = 40;
}

///////////////////////////////////
//房间相关协议
///////////////////////////////////

message CreateRoomReq {
	required string gamerule = 1;
}

message CreateRoomRes {
	required sint32 status = 1;
}

message JoinRoomReq {
	required string roomid = 1;
}

message JoinRoomRes {
	required sint32 status = 1;
}

message ExitRoomReq {
	
}

message ExitRoomRes {
	required sint32 status = 1;
	optional sint32 numberid = 2;
}

message DessolveReq {
	
}

message DessolveRes {
	required sint32 status = 1;
}

message GetRoomStatusReq {
	
}

message GetRoomStatusRes {
	required sint32 status = 1;
}

message BackRoomReq {
	
}

message BackRoomRes {
	required sint32 status = 1;
}

///////////////////////////////////
//游戏通用协议
///////////////////////////////////

message UserInfo {
	required string numberid = 1;
	required string userInfoString = 2;
}

message CheckLinkGameReq {

}

message CheckLinkGameRes {
	required sint32 status = 1;
}

message UserInfoRes {
	repeated UserInfo userinfo = 1;
}

message GameRuleRes {
	required string gamerule = 1;
}

message RoomIdRes {
	required string roomid = 1;
}

message PlayCountRes {
	required string playcount = 1;
	required string totalplaycount = 2;
}

message UserReadyReq {
	
}

message UserReadyRes {
	required sint32 status 	= 1;
	optional sint32 seatid = 2;
	optional sint32 userstate = 3;
}

message GameStartRes {
	required sint32 status = 1;
}

message GameEndRes {
	repeated sint32 status = 1;
}

message UserOfflineRes {
	required sint32 seatid = 1;
}

message LoginLogicReq {
}

message LoginLogicRes {
	required sint32 status = 1;
}

///////////////////////////////////
//游戏具体玩法相关
///////////////////////////////////

//单个玩家位置
message OnePlayerPos {
	required sint32 seatid = 1;
	required string posx = 2;
	required string posy = 3;
}

//单个玩家权限
message OnePlayerPower {
	required sint32 seatid = 1;
	required sint32 power = 2;
}

//单个玩家得分
message OnePlayerScore {
	required sint32 seatid = 1;
	required string score = 2;
}

message PlayerFirstBallPosRes {
	repeated OnePlayerPos positions = 1;
}

message PlayerPowerRes {
	repeated OnePlayerPower powers = 1;
}

message PlayerShootReq {
	required sint32 seatid = 1;
	required string posx = 2;
	required string posy = 3;
	optional int32 shootpower = 4;
}

message PlayerShootRes {
	required sint32 status = 1;
	required sint32 seatid = 2;
	required string posx = 3;
	required string posy = 4;
	optional int32 shootpower = 5;
}

message PlayerBallPosReq {
	repeated OnePlayerPos positions = 1;
}

message PlayerBallPosRes {
	required sint32 status = 1;
	repeated OnePlayerPos positions = 2;
}

message PlayerIsShootedReq {
	required sint32 srcseatid = 1;
	required sint32 desseatid = 2;
}

message PlayerIsShootedRes {
	required sint32 status = 1;
	required sint32 srcseatid = 2;
	required sint32 desseatid = 3;
}

message GameResultRes {
	repeated OnePlayerScore scores = 1;
}

message TotalGameResultRes {
	repeated OnePlayerScore scores = 1;
}

message PlayerScoreRes {
	repeated OnePlayerScore scores = 1;	
}

message UserMatchReq {
	required sint32 zoomid = 1;  //房间类型
}

message UserMatchRes {
	required sint32 status = 1;
	optional bool matchsuccess = 2;
	repeated UserInfo userinfo = 3;
}

message UserStopMatchReq {
}

message UserStopMatchRes {
	required sint32 status = 1;
}